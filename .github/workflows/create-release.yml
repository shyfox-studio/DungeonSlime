name: "Create Release"

on:
  workflow_dispatch:
    inputs:
      should-created:
        description: "Should this release be created?"
        required: true
        type: choice
        options:
          - Yes
          - No
        default: No

jobs:
  build:
    name: build-${{ matrix.os }} ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rids: -r win-x64
            artifact: publish-win-x64
          - os: ubuntu-latest
            rids: -r linux-x64
            artifact: publish-linux-x64
            wineprefix: /home/runner/.winemonogame
          - os: macos-latest
            artifact: publish-mac-universal"
            wineprefix: /Users/runner/.winemonogame
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup.NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Delete ./${{ matrix.wineprefix }}
        if: runner.os != 'Windows'
        run: rm -Rf ./${{ matrix.wineprefix }}

      - name: Install Dependencies
        run: |
              if [ "$RUNNER_OS" == "Linux" ]; then
                  sudo apt install p7zip-full curl
                  sudo apt install p7zip-full curl
                  sudo dpkg --add-architecture i386
                  sudo mkdir -pm755 /etc/apt/keyrings
                  sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
                  sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
                  sudo apt update && sudo apt install --install-recommends winehq-stable
                  echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
                  sudo apt install -y ttf-mscorefonts-installer
                  sudo fc-cache
                  fc-match Arial
                  wine --version
                  wget -qO- https://monogame.net/downloads/net9_mgfxc_wine_setup.sh | bash
              elif [ "$RUNNER_OS" == "macOS" ]; then
                  dotnet workload install macos
                  brew install wget p7zip curl freetype freeimage
                  sudo mkdir -p /usr/local/lib
                  sudo ln -sf /opt/homebrew/lib/libfreetype.6.dylib /usr/local/lib/libfreetype6.dylib
                  sudo ln -sf /opt/homebrew/lib/libfreeimage.3.dylib /usr/local/lib/libfreeimage.dylib
              fi
        shell: bash

      - name: Install MonoPack
        run: |
             dotnet tool install -g monopack
        shell: bash

      - name: Restore Dependecies
        run: dotnet restore

      - name: Delete ./${{ matrix.artifact }}
        run: rm -rf ./${{ matrix.artifact }}
        shell: bash

      - name: Install Rosetta
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
              softwareupdate --install-rosetta --agree-to-license
              /usr/bin/pgrep oahd >/dev/null && echo "Rosetta is installed" || echo "Rosetta is not installed"

      - name: Install WINE dependencies
        if: runner.os == 'macOS'
        run: |
              brew install libpng libjpeg libtiff
              brew install --cask xquartz wine-stable
              xattr -dr com.apple.quarantine "/Applications/Wine Stable.app"
              wine --version
              which wine
              sudo ln -s /usr/local/bin/wine /usr/local/bin/wine64
              wget -qO- https://monogame.net/downloads/net9_mgfxc_wine_setup.sh | bash
              rm -f ${{ matrix.wineprefix }}/wine64
              find ${{ matrix.wineprefix }}
              export WINEPREFIX=${{ matrix.wineprefix }}
              wine64 dotnet
        shell: bash

      - name: "update Path"
        if: runner.os != 'Windows'
        run: |
              echo "/opt/homebrew/lib:/usr/local/lib:/usr/local/bin" >> $GITHUB_PATH

      - name: "Build"
        run: dotnet build ./source/DungeonSlime/DungeonSlime.csproj -c Release

      - name: "Package"
        run: dotnet monopack -p ./source/DungeonSlime/DungeonSlime.csproj -o ./${{ matrix.artifact }} ${{ matrix.rids }} -i ./Info.plist -c ./Icon.icns -v
        shell: bash
        env:
          MGFXC_WINE_PATH: ${{ matrix.wineprefix }}

      - name: "Upload"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./${{ matrix.artifact }}
